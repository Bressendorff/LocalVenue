@typeparam T

<div class="@Class" @onfocusin="OnFocus" @onfocusout="FocusOut">
    <FloatingLabelHeader InputFieldId="@InputTextId" LabelText="@Label">
        <InputText type="string" id="@InputTextId" class="form-control" Value="@SearchString"  ValueExpression="() => SearchString" ValueChanged="OnValueChange" @oninput="OnInputChange" placeholder="#" autocomplete="off" />

        @if (Focused)
        {
            <div class="select-box-options d-flex flex-column position-absolute w-100" style="overflow: auto; @(MaxHeight.HasValue ? $"max-height: {MaxHeight}px" : string.Empty)">
                @if (Items is null)
                {
                    <div style="height: 75px" class="d-flex align-items-center justify-content-center card overflow-hidden">
                        <div class="sp sp-3balls"></div>
                    </div>
                }
                else if (Items.Count == 0)
                {
                    <div style="height: 75px" class="d-flex align-items-center justify-content-center card">
                        <div>@(NoDataMessage ?? "Ingen Data fundet")</div>
                    </div>
                }
                else
                {
                    @OptionTemplate((Items, (item) => SetSelectedItem(item)));
                }
            </div>
        }
    </FloatingLabelHeader>

</div>

@code {
    [Parameter, EditorRequired]
    public required string Label { get; set; }
    
    [Parameter, EditorRequired]
    public required Func<string, Task<List<T>>> GetItems { get; set; }
    
    [Parameter, EditorRequired]
    public EventCallback<T> SelectedItemChanged { get; set; }
    
    [Parameter, EditorRequired]
    public required T? SelectedItem { get; set; }
    
    [Parameter, EditorRequired]
    public required RenderFragment<(List<T> Items, Action<T> setItem)> OptionTemplate { get; set; }
    
    [Parameter, EditorRequired]
    public required Func<T, string?> DisplayValue { get; set; }
    
    [Parameter]
    public EventCallback<string> SearchStringChanged { get; set; }
    
    [Parameter]
    public string? NoDataMessage { get; set; }
    
    [Parameter]
    public string? Class { get; set; }
    
    [Parameter]
    public int? MaxHeight { get; set; }
    
    private List<T>? Items { get; set; }
    private string SearchString { get; set; } = string.Empty;

    private bool Focused { get; set; }
    private string InputTextId { get; set; } = Guid.NewGuid().ToString();
    
    
    private async Task OnFocus()
    {
        Focused = true;
        Items ??= await GetItems(SearchString);
    }

    private async Task FocusOut()
    {
        await Task.Delay(150);
        Focused = false;
    }
    
    private async Task OnValueChange(string value)
    {
        SearchString = value;
        Items = await GetItems(value);
        StateHasChanged();
    }
    
    private async Task OnInputChange(ChangeEventArgs e)
    {
        SearchString = e.Value?.ToString() ?? string.Empty;
        Items = await GetItems(SearchString);
        await SearchStringChanged.InvokeAsync(SearchString);
        StateHasChanged();
    }
    
    private async Task SetSelectedItem(T item)
    {
        SelectedItem = item;
        await SelectedItemChanged.InvokeAsync(item);
        SearchString = DisplayValue(item) ?? string.Empty;
        Items = await GetItems(SearchString);
    }
    
    public void ClearSelectedItem()
    {
        Items = null;
        SearchString = string.Empty;
    }
}