{
	"info": {
		"_postman_id": "2ccfb5af-970d-489e-89fa-2386fcf41d74",
		"name": "Shows",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19420382"
	},
	"item": [
		{
			"name": "Get All Shows Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseData = pm.response.json().results.$values;\r",
							"\r",
							"pm.test(\"Values response is not empty\", function () {\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"   \r",
							"    responseData.forEach(function (show) {\r",
							"        pm.expect(show).to.have.property('showId');\r",
							"        pm.expect(show).to.have.property('title');\r",
							"        pm.expect(show).to.have.property('description');\r",
							"        pm.expect(show).to.have.property('startTime');\r",
							"        pm.expect(show).to.have.property('endTime');\r",
							"        pm.expect(show).to.have.property('genre');\r",
							"        pm.expect(show).to.have.property('openingNight');\r",
							"        pm.expect(show).to.have.property('tickets');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/Show",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Bad Request invalid page parameter",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"var pageParam = pm.variables.get(\"INVALID_PAGE_PARAM\")\r",
							"\r",
							"pm.test(\"Returns expected error message\", function () {\r",
							"    var responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include(\"The value '\" + pageParam + \"' is not valid.\");\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/Show?page={{INVALID_PAGE_PARAM}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show"
					],
					"query": [
						{
							"key": "page",
							"value": "{{INVALID_PAGE_PARAM}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Shows Search Title Default",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseData = pm.response.json().results.$values;\r",
							"\r",
							"pm.test(\"Values response is not empty\", function () {\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"var searchTerm = pm.variables.get(\"SEARCH_TERM\");\r",
							"\r",
							"pm.test(\"First show contains '\" + searchTerm + \"'\", function () {\r",
							"    var show = responseData[0];\r",
							"    pm.expect(show.title.toLowerCase()).contains(searchTerm.toLowerCase())\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"   \r",
							"    responseData.forEach(function (show) {\r",
							"        pm.expect(show).to.have.property('showId');\r",
							"        pm.expect(show).to.have.property('title');\r",
							"        pm.expect(show).to.have.property('description');\r",
							"        pm.expect(show).to.have.property('startTime');\r",
							"        pm.expect(show).to.have.property('endTime');\r",
							"        pm.expect(show).to.have.property('genre');\r",
							"        pm.expect(show).to.have.property('openingNight');\r",
							"        pm.expect(show).to.have.property('tickets');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/Show?searchParameter={{SEARCH_TERM}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show"
					],
					"query": [
						{
							"key": "searchParameter",
							"value": "{{SEARCH_TERM}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Shows Search Description",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseData = pm.response.json().results.$values;\r",
							"\r",
							"pm.test(\"Values response is not empty\", function () {\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"var searchTerm = pm.variables.get(\"SEARCH_TERM_DESCRIPTION\");\r",
							"\r",
							"pm.test(\"All show results contain '\" + searchTerm + \"'\", function () {\r",
							"    responseData.forEach(function (show) {\r",
							"        pm.expect(show.description.toLowerCase()).contains(searchTerm.toLowerCase())\r",
							"    })\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"   \r",
							"    responseData.forEach(function (show) {\r",
							"        pm.expect(show).to.have.property('showId');\r",
							"        pm.expect(show).to.have.property('title');\r",
							"        pm.expect(show).to.have.property('description');\r",
							"        pm.expect(show).to.have.property('startTime');\r",
							"        pm.expect(show).to.have.property('endTime');\r",
							"        pm.expect(show).to.have.property('genre');\r",
							"        pm.expect(show).to.have.property('openingNight');\r",
							"        pm.expect(show).to.have.property('tickets');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/Show?searchParameter={{SEARCH_TERM_DESCRIPTION}}&searchProperty=description",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show"
					],
					"query": [
						{
							"key": "searchParameter",
							"value": "{{SEARCH_TERM_DESCRIPTION}}"
						},
						{
							"key": "searchProperty",
							"value": "description"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Shows Pagination",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseData = pm.response.json().results.$values;\r",
							"\r",
							"pm.test(\"Values response is not empty\", function () {\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"   \r",
							"    responseData.forEach(function (show) {\r",
							"        pm.expect(show).to.have.property('showId');\r",
							"        pm.expect(show).to.have.property('title');\r",
							"        pm.expect(show).to.have.property('description');\r",
							"        pm.expect(show).to.have.property('startTime');\r",
							"        pm.expect(show).to.have.property('endTime');\r",
							"        pm.expect(show).to.have.property('genre');\r",
							"        pm.expect(show).to.have.property('openingNight');\r",
							"        pm.expect(show).to.have.property('tickets');\r",
							"    });\r",
							"});\r",
							"\r",
							"var pageSize = parseInt(pm.variables.get(\"PAGE_SIZE\"));\r",
							"pm.test(\"Response returns a maximum of \" + pageSize + \" shows\", function () {\r",
							"    var showCount = 0;\r",
							"    \r",
							"    responseData.forEach(function () {\r",
							"        showCount += 1;\r",
							"    })\r",
							"\r",
							"    pm.expect(showCount).to.be.below(pageSize + 1);\r",
							"\r",
							"})\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/Show?page=1&pageSize={{PAGE_SIZE}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show"
					],
					"query": [
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "pageSize",
							"value": "{{PAGE_SIZE}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get All Shows Pagination No Shows on Page 999999",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseData = pm.response.json().results.$values;\r",
							"\r",
							"pm.test(\"Values response is empty\", function () {\r",
							"    pm.expect(responseData).to.be.an('array').that.is.empty;\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/Show?page=999999&pageSize={{PAGE_SIZE}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show"
					],
					"query": [
						{
							"key": "page",
							"value": "999999"
						},
						{
							"key": "pageSize",
							"value": "{{PAGE_SIZE}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Show Bad Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns expected error message\", function () {\r",
							"    var responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include('One or more validation errors occurred');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"showId\": 0,\r\n  \"description\": {{ERROR_DESCRIPTION_DATA_TYPE}},\r\n  \"startTime\": \"2025-01-11T15:30:54.260Z\",\r\n  \"endTime\": \"2025-01-11T15:30:54.260Z\",\r\n  \"genre\": 0\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/Show",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Show Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Has showId\", function() {\r",
							"    pm.expect(jsonData[\"showId\"]).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"showId is non-negative integer\", function() {\r",
							"    pm.expect(jsonData[\"showId\"]).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"CREATED_SHOW_ID\", jsonData[\"showId\"]);\r",
							"\r",
							"var firstTicketId = jsonData.tickets.$values[0].ticketId;\r",
							"pm.collectionVariables.set(\"CREATED_TICKET_ID\", firstTicketId)\r",
							"\r",
							"\r",
							"pm.test(\"Title and description are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    \r",
							"    pm.expect(responseData.title).to.satisfy((value) => {\r",
							"        return (typeof value === 'string' && value.length > 0) || (typeof value === 'number' && value >= 0);\r",
							"    }, \"Title should be a non-empty string or a non-negative integer\");\r",
							"\r",
							"    pm.expect(responseData.description).to.satisfy((value) => {\r",
							"        return (typeof value === 'string' && value.length > 0) || (typeof value === 'number' && value >= 0);\r",
							"    }, \"Description should be a non-empty string or a non-negative integer\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"showId\": 0,\r\n  \"title\": {{CREATE_SHOW_TITLE}},\r\n  \"description\": {{CREATE_SHOW_DESCRIPTION}},\r\n  \"startTime\": {{CREATE_SHOW_START_TIME}},\r\n  \"endTime\": {{CREATE_SHOW_END_TIME}},\r\n  \"genre\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/Show",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTicketById Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"\r",
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - seatId, section, row, and number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('showId');\r",
							"    pm.expect(responseData).to.have.property('ticketId');\r",
							"    pm.expect(responseData).to.have.property('show');\r",
							"    pm.expect(responseData).to.have.property('seatId');\r",
							"    pm.expect(responseData).to.have.property('seat');\r",
							"    pm.expect(responseData).to.have.property('price');\r",
							"    pm.expect(responseData).to.have.property('status');\r",
							"    pm.expect(responseData).to.have.property('customerId');\r",
							"    pm.expect(responseData).to.have.property('customer');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ticketId is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.ticketId).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/Ticket/{{CREATED_TICKET_ID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Ticket",
						"{{CREATED_TICKET_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTicketById Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"var showId = pm.variables.get(\"NON_EXISTENT_ID\");\r",
							"\r",
							"pm.test(\"Returns expected error message\", function () {\r",
							"    var responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include('Ticket with id ' + showId + ' not found');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/Ticket/{{NON_EXISTENT_ID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Ticket",
						"{{NON_EXISTENT_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetTicketById Bad Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns expected error message\", function () {\r",
							"    var responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include('One or more validation errors occurred');\r",
							"    pm.expect(responseText).to.include(\"The value '\").and.to.include(\"' is not valid.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/Ticket/{{NON_EXISTENT_ID}}'",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Ticket",
						"{{NON_EXISTENT_ID}}'"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ticket Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"var ticketId = pm.variables.get(\"NON_EXISTENT_ID\");\r",
							"\r",
							"pm.test(\"Returns expected error message\", function () {\r",
							"    var responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include('No ticket found with id ' + ticketId);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ticketId\": {{NON_EXISTENT_ID}},\r\n  \"showId\": 1,\r\n  \"seatId\": 1,\r\n  \"price\": 130,\r\n  \"status\": 0,\r\n  \"customerId\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/Ticket",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Ticket"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ticket Bad Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns expected error message\", function () {\r",
							"    var responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include('One or more validation errors occurred');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"showId\": \"error\",\r\n  \"title\": {{UPDATE_SHOW_TITLE}},\r\n  \"description\": {{CREATE_SHOW_DESCRIPTION}},\r\n  \"startTime\": {{CREATE_SHOW_START_TIME}},\r\n  \"endTime\": {{CREATE_SHOW_END_TIME}},\r\n  \"genre\": {{ERROR_GENRE_DATA_TYPE}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/Ticket",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Ticket"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Ticket Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var deletedTicketId = parseInt( pm.variables.get(\"CREATED_TICKET_ID\"));\r",
							"var responseJson = pm.response.json();\r",
							"\r",
							"pm.test(\"The deleted ticket's id matches the request id\", function() {\r",
							"    pm.expect(responseJson.ticketId).to.eq(deletedTicketId);\r",
							"})\r",
							"\r",
							"pm.collectionVariables.set(\"DELETED_TICKET_SHOW_ID\", responseJson[\"showId\"]);\r",
							"pm.collectionVariables.set(\"DELETED_TICKET_SEAT_ID\", responseJson[\"seatId\"]);\r",
							"pm.collectionVariables.set(\"DELETED_TICKET_PRICE\", responseJson[\"price\"]);\r",
							"pm.collectionVariables.set(\"DELETED_TICKET_STATUS\", responseJson[\"status\"]);\r",
							"pm.collectionVariables.set(\"DELETED_TICKET_CUSTOMER_ID\", responseJson[\"customerId\"]);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/Ticket/{{CREATED_TICKET_ID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Ticket",
						"{{CREATED_TICKET_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Ticket Bad Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"\r",
							"var seatId = pm.variables.get(\"NON_EXISTENT_ID\");\r",
							"\r",
							"pm.test(\"Returns expected error message\", function () {\r",
							"    var responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include(\"Item with key '\" + seatId + \"' not found\");\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/Ticket/{{NON_EXISTENT_ID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Ticket",
						"{{NON_EXISTENT_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Ticket Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 201\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Has ticketId\", function() {\r",
							"    pm.expect(jsonData[\"ticketId\"]).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"ticketId is non-negative integer\", function() {\r",
							"    pm.expect(jsonData[\"ticketId\"]).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"pm.collectionVariables.set('CREATED_TICKET_ID', jsonData['ticketId'])\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"showId\": {{DELETED_TICKET_SHOW_ID}},\r\n  \"seatId\": {{DELETED_TICKET_SEAT_ID}},\r\n  \"price\": 120,\r\n  \"status\": {{DELETED_TICKET_STATUS}},\r\n  \"customerId\": {{DELETED_TICKET_CUSTOMER_ID}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/Ticket",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Ticket"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Ticket Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Ticket Price is updated\", function () {\r",
							"    var preDeletePrice = pm.collectionVariables.get(\"DELETED_TICKET_PRICE\");\r",
							"    pm.expect(jsonData.price).to.eql(parseInt(preDeletePrice));\r",
							"});\r",
							"\r",
							"pm.test(\"Has showId\", function() {\r",
							"   pm.expect(jsonData[\"showId\"]).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"showId is non-negative integer\", function() {\r",
							"    pm.expect(jsonData[\"showId\"]).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"ticketId\": {{CREATED_TICKET_ID}}  ,\r\n  \"showId\": {{DELETED_TICKET_SHOW_ID}},\r\n  \"seatId\": {{DELETED_TICKET_SEAT_ID}},\r\n  \"price\": {{DELETED_TICKET_PRICE}},\r\n  \"status\": {{DELETED_TICKET_STATUS}},\r\n  \"customerId\": {{DELETED_TICKET_CUSTOMER_ID}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/Ticket",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Ticket"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Ticket Bad Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns expected error message\", function () {\r",
							"    var responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include(\"One or more validation errors\");\r",
							"}); \r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"showId\": {{DELETED_TICKET_SHOW_ID}},\r\n  \"seatId\": {{DELETED_TICKET_SEAT_ID}},\r\n  \"price\": \"error\",\r\n  \"status\": {{DELETED_TICKET_STATUS}},\r\n  \"customerId\": {{DELETED_TICKET_CUSTOMER_ID}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/Ticket",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Ticket"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Ticket Conflict",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 409\", function () {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns expected error message\", function () {\r",
							"    var responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include(\" already has seat \");\r",
							"}); \r",
							"\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"showId\": {{DELETED_TICKET_SHOW_ID}},\r\n  \"seatId\": {{DELETED_TICKET_SEAT_ID}},\r\n  \"price\": {{DELETED_TICKET_PRICE}},\r\n  \"status\": {{DELETED_TICKET_STATUS}},\r\n  \"customerId\": {{DELETED_TICKET_CUSTOMER_ID}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/Ticket",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Ticket"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Tickets for Show Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var responseData = pm.response.json().$values;\r",
							"\r",
							"pm.test(\"Values response is not empty\", function () {\r",
							"    pm.expect(responseData).to.be.an('array').that.is.not.empty;\r",
							"});\r",
							"\r",
							"pm.test(\"Show value has correct data types\", function () {\r",
							"    responseData.forEach((value, index) => {\r",
							"        if (index === 0) {\r",
							"            pm.expect(value).to.be.an('object');\r",
							"\r",
							"            pm.expect(value.ticketId).to.be.a('number');\r",
							"        \r",
							"            pm.expect(value.showId).to.satisfy((value) => {\r",
							"                return (typeof value === 'string' && value.length > 0) || (typeof value === 'number' && value >= 0);\r",
							"            }, \"ShowId should be a non-empty string or a non-negative integer\");\r",
							"\r",
							"            pm.expect(value.seatId).to.satisfy((value) => {\r",
							"                return (typeof value === 'string' && value.length > 0) || (typeof value === 'number' && value >= 0);\r",
							"            }, \"SeatId should be a non-empty string or a non-negative integer\");\r",
							"\r",
							"            pm.expect(value.status).to.be.a('number');\r",
							"\r",
							"        }\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/Show/{{CREATED_SHOW_ID}}/tickets",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show",
						"{{CREATED_SHOW_ID}}",
						"tickets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Tickets for Show Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"var showId = pm.variables.get(\"NON_EXISTENT_ID\");\r",
							"pm.test(\"Correct error message\", function () {\r",
							"    var responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include(\"Show with id \" + showId + \" not found\" );\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/Show/{{NON_EXISTENT_ID}}/tickets",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show",
						"{{NON_EXISTENT_ID}}",
						"tickets"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Tickets for Show Bad Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns expected error message\", function () {\r",
							"    var responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include('One or more validation errors occurred');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/Show/'{{NON_EXISTENT_ID}}'",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show",
						"'{{NON_EXISTENT_ID}}'"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.to.have.status(200));\r",
							"});\r",
							"\r",
							"\r",
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - seatId, section, row, and number\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"\r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('showId');\r",
							"    pm.expect(responseData).to.have.property('title');\r",
							"    pm.expect(responseData).to.have.property('description');\r",
							"    pm.expect(responseData).to.have.property('startTime');\r",
							"    pm.expect(responseData).to.have.property('endTime');\r",
							"    pm.expect(responseData).to.have.property('genre');\r",
							"    pm.expect(responseData).to.have.property('openingNight');\r",
							"    pm.expect(responseData).to.have.property('tickets');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"showId is a non-negative integer\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    pm.expect(responseData.showId).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Section, row, and number are non-empty strings or non-negative integers\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    \r",
							"    pm.expect(responseData.title).to.satisfy((value) => {\r",
							"        return (typeof value === 'string' && value.length > 0) || (typeof value === 'number' && value >= 0);\r",
							"    }, \"Title should be a non-empty string or a non-negative integer\");\r",
							"\r",
							"    pm.expect(responseData.description).to.satisfy((value) => {\r",
							"        return (typeof value === 'string' && value.length > 0) || (typeof value === 'number' && value >= 0);\r",
							"    }, \"description should be a non-empty string or a non-negative integer\");\r",
							"\r",
							"    pm.expect(responseData.genre).to.satisfy((value) => {\r",
							"        return (typeof value === 'string' && value.length > 0) || (typeof value === 'number' && value >= 0);\r",
							"    }, \"genre should be a non-empty string or a non-negative integer\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/Show/{{CREATED_SHOW_ID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show",
						"{{CREATED_SHOW_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"var showId = pm.variables.get(\"NON_EXISTENT_ID\");\r",
							"\r",
							"pm.test(\"Returns expected error message\", function () {\r",
							"    var responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include('Show with id ' + showId + ' not found');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/Show/{{NON_EXISTENT_ID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show",
						"{{NON_EXISTENT_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Show Bad Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns expected error message\", function () {\r",
							"    var responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include('One or more validation errors occurred');\r",
							"    pm.expect(responseText).to.include(\"The value '\").and.to.include(\"' is not valid.\");\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/Show/'{{NON_EXISTENT_ID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show",
						"'{{NON_EXISTENT_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Show Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"   pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"pm.test(\"Show title is updated\", function () {\r",
							"    var expectedTitle = pm.variables.get(\"UPDATE_SHOW_TITLE\");\r",
							"    pm.expect(expectedTitle).to.include(jsonData.title);\r",
							"});\r",
							"\r",
							"pm.test(\"Has showId\", function() {\r",
							"   pm.expect(jsonData[\"showId\"]).to.be.a('number');\r",
							"});\r",
							"\r",
							"pm.test(\"showId is non-negative integer\", function() {\r",
							"    pm.expect(jsonData[\"showId\"]).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"showId\": {{CREATED_SHOW_ID}},\r\n  \"title\": {{UPDATE_SHOW_TITLE}},\r\n  \"description\": {{CREATE_SHOW_DESCRIPTION}},\r\n  \"startTime\": {{CREATE_SHOW_START_TIME}},\r\n  \"endTime\": {{CREATE_SHOW_END_TIME}},\r\n  \"genre\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/Show",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Show Bad Request",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Returns expected error message\", function () {\r",
							"    var responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include('One or more validation errors occurred');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"showId\": {{CREATED_SHOW_ID}},\r\n  \"title\": {{UPDATE_SHOW_TITLE}},\r\n  \"description\": {{CREATE_SHOW_DESCRIPTION}},\r\n  \"startTime\": {{CREATE_SHOW_START_TIME}},\r\n  \"endTime\": {{CREATE_SHOW_END_TIME}},\r\n  \"genre\": {{ERROR_GENRE_DATA_TYPE}}\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/Show",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Show Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"var showId = pm.variables.get(\"NON_EXISTENT_ID\");\r",
							"\r",
							"pm.test(\"Returns expected error message\", function () {\r",
							"    var responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include('No show found with id ' + showId);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"showId\": {{NON_EXISTENT_ID}},\r\n  \"title\": {{UPDATE_SHOW_TITLE}},\r\n  \"description\": {{CREATE_SHOW_DESCRIPTION}},\r\n  \"startTime\": {{CREATE_SHOW_START_TIME}},\r\n  \"endTime\": {{CREATE_SHOW_END_TIME}},\r\n  \"genre\": 1\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BASE_URL}}/api/Show",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Show Success",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var deletedShowId = parseInt( pm.variables.get(\"CREATED_SHOW_ID\"));\r",
							"\r",
							"pm.test(\"The deleted show's id matches the request id\", function() {\r",
							"    var responseJson = pm.response.json();\r",
							"    pm.expect(responseJson.showId).to.eq(deletedShowId);\r",
							"})\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/Show/{{CREATED_SHOW_ID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show",
						"{{CREATED_SHOW_ID}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Show Not Found",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"var expected_reponse_time = parseInt(pm.globals.get(\"RESPONSE_TIME\"));\r",
							"\r",
							"pm.test(\"Response time is less than the expected \" + expected_reponse_time + \"ms\", function () {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(expected_reponse_time);\r",
							"});\r",
							"\r",
							"pm.test(\"Status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"\r",
							"var seatId = pm.variables.get(\"NON_EXISTENT_ID\");\r",
							"\r",
							"pm.test(\"Returns expected error message\", function () {\r",
							"    var responseText = pm.response.text();\r",
							"    pm.expect(responseText).to.include(\"Item with key '\" + seatId + \"' not found\");\r",
							"}); "
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{BASE_URL}}/api/Show/{{NON_EXISTENT_ID}}",
					"host": [
						"{{BASE_URL}}"
					],
					"path": [
						"api",
						"Show",
						"{{NON_EXISTENT_ID}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "SEARCH_TERM",
			"value": "COMEDY"
		},
		{
			"key": "SEARCH_TERM_DESCRIPTION",
			"value": "night"
		},
		{
			"key": "PAGE_SIZE",
			"value": "2"
		},
		{
			"key": "INVALID_PAGE_PARAM",
			"value": "Error"
		},
		{
			"key": "ERROR_DESCRIPTION_DATA_TYPE",
			"value": "1",
			"type": "string"
		},
		{
			"key": "CREATE_SHOW_TITLE",
			"value": "\"New Show\""
		},
		{
			"key": "CREATE_SHOW_DESCRIPTION",
			"value": "\"This is a very good description\""
		},
		{
			"key": "CREATE_SHOW_START_TIME",
			"value": "\"2025-02-01T15:30:54.260Z\""
		},
		{
			"key": "CREATE_SHOW_END_TIME",
			"value": "\"2025-02-28T15:30:54.260Z\""
		},
		{
			"key": "CREATED_SHOW_ID",
			"value": ""
		},
		{
			"key": "NON_EXISTENT_ID",
			"value": "-1"
		},
		{
			"key": "UPDATE_SHOW_TITLE",
			"value": "\"Updated show title\""
		},
		{
			"key": "ERROR_GENRE_DATA_TYPE",
			"value": "\"ErrorGenreDataType\""
		},
		{
			"key": "CREATED_TICKET_ID",
			"value": ""
		},
		{
			"key": "DELETED_TICKET_SHOW_ID",
			"value": ""
		},
		{
			"key": "DELETED_TICKET_SEAT_ID",
			"value": ""
		},
		{
			"key": "DELETED_TICKET_PRICE",
			"value": ""
		},
		{
			"key": "DELETED_TICKET_STATUS",
			"value": ""
		},
		{
			"key": "DELETED_TICKET_CUSTOMER_ID",
			"value": ""
		}
	]
}